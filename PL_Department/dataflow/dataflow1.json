{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQL_tblUserInfo",
						"type": "DatasetReference"
					},
					"name": "UserInformation"
				},
				{
					"dataset": {
						"referenceName": "ASQL_LicenseType",
						"type": "DatasetReference"
					},
					"name": "LicenseType"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ASQL_tbmUserLicense",
						"type": "DatasetReference"
					},
					"name": "TargetUserLicense"
				}
			],
			"transformations": [
				{
					"name": "GetLicenseTypeId"
				}
			],
			"script": "\n\nsource(output(\n\t\t{Last Name} as string,\n\t\t{First Name} as string,\n\t\t{User Name} as string,\n\t\tLicenseType as string,\n\t\t{License Number} as string,\n\t\t{License State} as string,\n\t\t{License Activation Date} as string,\n\t\t{License Expiration Date} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: '(SELECT\\nui.ui_last_name as [Last Name]\\n,ui.ui_first_name as [First Name]\\n,lg.lg_name as [User Name]\\n, CASE \\n\tWHEN (ui.ui_loan_originator_id IS NOT NULL AND ui.ui_loan_originator_id !=\\'\\') THEN \\'NMLS\\'\\n\tELSE \\'\\'\\n\tEND as [LicenseType]\\n,ui.ui_loan_originator_id as [License Number]\\n,\\'\\' as [License State]\\n,\\'\\' as [License Activation Date]\\n,\\'\\' as [License Expiration Date]\\nfrom user_info ui\\nleft join login lg on ui.ui_id = lg.ui_id\\nwhere ui.ui_type != \\'Cons\\'\\nand ui.ui_suspended = \\'N\\'\\nAND (ui_loan_originator_id != \\'\\' AND ui_loan_originator_id is not null)\\n)\\nUNION\\n(\\nSELECT\\nui.ui_last_name as [Last Name]\\n,ui.ui_first_name as [First Name]\\n,lg.lg_name as [User Name]\\n, CASE \\n\tWHEN (ui.ui_loan_originator_id IS NOT NULL AND ui.ui_loan_originator_id !=\\'\\') AND usl.StateLicenseId IS NULL THEN \\'NMLS\\'\\n\tWHEN usl.StateLicenseId IS NOT NULL THEN \\'Originator\\'\\n\tELSE \\'\\'\\n\tEND as [LicenseType]\\n,usl.StateLicenseId as [License Number]\\n,usl.StateAbbreviation as [License State]\\n,\\'\\' as [License Activation Date]\\n,\\'\\' as [License Expiration Date]\\nfrom user_info ui\\nleft join login lg on ui.ui_id = lg.ui_id\\nInner join UserStateLicense usl on ui.ui_id = usl.userid\\nAND ui.ui_type != \\'Cons\\'\\nAND ui.ui_suspended = \\'N\\'\\n)',\n\tformat: 'query') ~> UserInformation\nsource(output(\n\t\tTypeId as integer,\n\t\tDescription as string,\n\t\tLoanLevelFieldId as integer,\n\t\tLoanLevelExemptFieldId as integer,\n\t\tActivationDate as integer,\n\t\tExpirationDate as integer,\n\t\tState as integer,\n\t\tIsNMLS as boolean\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LicenseType\nUserInformation, LicenseType join(LicenseType == Description,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> GetLicenseTypeId\nGetLicenseTypeId sink(input(\n\t\tUserId as string,\n\t\tLicenseTypeId as integer,\n\t\tLicenseNumber as string,\n\t\tIsExempt as boolean,\n\t\tIsActive as boolean,\n\t\tActivationDate as timestamp,\n\t\tExpirationDate as timestamp,\n\t\tLicenseState as string,\n\t\tID as integer,\n\t\tMID as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tUserId = {User Name},\n\t\tLicenseTypeId = TypeId,\n\t\tLicenseNumber = {License Number},\n\t\tActivationDate = {License Activation Date},\n\t\tExpirationDate = {License Expiration Date},\n\t\tLicenseState = {License State}\n\t)) ~> TargetUserLicense"
		}
	}
}